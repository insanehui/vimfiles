# 自己常用的 js snips 都放这里，实际上不再区分jsx

# ------------ console调试相关 ---------------------

snippet cg "console.group" b
console.group("${1:label}")
${VISUAL}$0
console.groupEnd()
endsnippet

snippet cl "console.log" w
console.log(${1:"${2:value}"${3:, ${4:$2}}})
endsnippet

snippet cl` "console.log(`...`)" w
console.log(\`$1\`)
endsnippet

snippet ce "console.error" w
console.error(${1:"${2:value}"${3:, ${4:$2}}})
endsnippet

# ------------------ 常用流程 ------------------
snippet ${ "补全${ }" w
${$1}
endsnippet

snippet /* "块注释" w
/* $1 */$0
endsnippet

snippet con "const声明" w
const ${1:name} = ${2:${VISUAL}}
endsnippet

snippet let "let声明" w
let ${1:name} = ${2:${VISUAL}}
endsnippet

snippet static "类里的static成员" w
static ${1:name} = ${2:${VISUAL}}
endsnippet

snippet if "if语句" w
if ( ${1:con} ) {
	${2:${VISUAL}}
} $0
endsnippet

snippet if1 "if语句" w
if ( ${1:val} === $2 ) {
	${3:${VISUAL}}
} $0
endsnippet

snippet if' "if 判断字符串" w
if ( ${1:v} === '${2:str}' ) {
	${3:${VISUAL}}
}$0
endsnippet

snippet else "else" w
else {
	$0
}
endsnippet

snippet null "判断是否为null" w
if ( ${1:!}_.isNull(${2:${VISUAL}}) ) {
	$3
}$0
endsnippet

snippet undef "判断是否为undefined" w
if ( ${1:!}_.isUndefined(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet num "判断是否为number" w
if ( ${1:!}_.isNumber(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet str "判断是否为string" w
if ( ${1:!}_.isString(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet obj "判断是否为obj" w
if ( ${1:!}_.isObject(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet forof[ "for ... of array" b
for (let ${1:i} of ${2:arr}) {
	${3:console.log($1)}
}
endsnippet

snippet map "map" w
map(${1:${2:name}, }(${3:item}, ${4:i} ) => {
	$0
})
endsnippet

snippet each "each" w
each(${1:datas}, (${2:v}, ${3:i} ) => {
	$0
})
endsnippet

snippet forEach "forEach，用于Immutable" w
forEach((${1:v}, ${2:i}) => {
	$0
})
endsnippet

snippet try "try catch" b
try {
	${1:${VISUAL}}
} catch(e) {$2}$0
endsnippet

# ------------ 对象、数组内部 -------------

snippet oo "对象化" w
{ 
	${1:key} : ${2:${VISUAL}},
}$0
endsnippet

snippet ooo "行内对象化" w
{ ${1:key} : ${2:${VISUAL}}, }$0
endsnippet

snippet : "增加一个普通属性" w
${1:key} : ${2:val}, $0
endsnippet

snippet :o "增加一个属性，该属性是个对象" b
${1:key} : {
	$0
},
endsnippet

snippet :a "增加一个数组属性" b
${1:key} : [
	$0
],
endsnippet

snippet :' "增加一个字符串属性" w
${1:key} : '${2:val}',
endsnippet

snippet {, "增加一个数组元素，该元素是一个对象" b
{
	$0
},
endsnippet

snippet {}, "增加一个数组元素，该元素是一个对象，行内" w
{ ${1:${VISUAL}} },$0
endsnippet

snippet :f "函数作为成员" b
${1:name}(${2:arg}) {
	$3
},$0
endsnippet

# ----------- 函数 --------------

snippet fun "普通函数" w
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}

endsnippet

snippet f( "匿名函数" w
(${2:argument}) => {
	${VISUAL}$0
}
endsnippet

snippet f() "同一行内的匿名函数" w
(${2:argument}) => {${VISUAL}$0}
endsnippet

snippet (f "闭包" w
(x=>{
	${1:return ${2:${VISUAL}}}
})()
endsnippet

snippet {f "类成员方法" b
${1:name}(${2:arg}) {
	$3
}$0
endsnippet

# ----------- promise --------------

snippet then "promise.then" w
then(${1:res} => {
	$0
})
endsnippet

# ----------- eslint ---------------

snippet lintpascal "忽略pascal的要求" b
/* eslint-disable react/jsx-pascal-case */
endsnippet

snippet lintnextline "对下一行不检查" b
// eslint-disable-next-line
endsnippet

# ----------- react ---------------

snippet p "this.props" b
const p = this.props $0
endsnippet

snippet s "this.state" b
const s = this.state $0
endsnippet

snippet r "refs" b
const r = this.refs$0
endsnippet

snippet ss "this.setState" w
this.setState({ $0 })
endsnippet

snippet st "style=..." w
style={${1:\{$2\}}} $0
endsnippet

snippet index "init a index file" b
import React from 'react'
import { render } from 'react-dom'

import App from './App.js'

render(<App />, document.getElementById('root'))

endsnippet

snippet cmp "init a component file" b
import React, { PureComponent } from 'react'

class ${1:Test} extends PureComponent {
	render() {
		return ${2:<div>${3:test}</div>}
	}
}

export default $1

endsnippet

snippet fcmp "函数来表示一个对象" w
function ${1:Name}(p){
	return $2
} $0
endsnippet

snippet ct "构造函数constructor" b
constructor(p) {
	super(p)

	this.state = {}
}
$0
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps(np) {
	$1
}$0
endsnippet

snippet cdm "componentDidMount" b
componentDidMount(){
	$1
}$0
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(pp, ps, pc){
	$1
}$0
endsnippet

snippet cwum "componentWillUnmout" b
componentWillUnmount(){
	$1
}$0
endsnippet

snippet rcc "react create class" b
const ${1:X} = React.createClass({
	render(){
		return (
			${0:<div>hello</div>}
		)
	}
})
endsnippet

snippet cc "class extends react component" b
class ${1:X} extends Component {
	render() {
		return <div>${0:Test}</div>
	}
}
endsnippet

snippet bind "用于事件响应函数的bind" w
this.${1:method}.bind(this${2:, ${3:arg}})
endsnippet

snippet cbind "在构造函数中的手动bind" b
this.${1:method} = this.$1.bind(this)
endsnippet

snippet bbind "bind方法赋给同名属性" w
${1:attr}={this.${2:$1}.bind(this)} $0
endsnippet

snippet isr "isRequired" w
isRequired
endsnippet

snippet pt "引入PropTypes" b
const { ${1:number} } = React.PropTypes
endsnippet

snippet pt= "设置propTypes" b
static propTypes = {
	$0
}
endsnippet

snippet dp "default props" b
static defaultProps = {
	$0
}
endsnippet

snippet ps "设置p->s模式" b
componentWillReceiveProps(np) {
	this.setState({ ...np })
	在构造函数里：
	this.state = {...p}
}
endsnippet

# ----------- redux ---------------

snippet rcmp "redux component" b
import React, { PureComponent } from 'react';
import { connect } from 'react-redux'

class ${1:ComponentName} extends PureComponent {

	render() {
		return <div>
		</div>
	}
}

const sm = (s) => {
	return {
	}
}

const dm = (d) => {
	return {
		some_action(){
			// d({ type: 'some_action', })
		},
	}
}

export default connect(sm, dm)($1)

endsnippet

snippet thunk "生成一个thunk" w
d((d${1:, getState}) => {
	${2:const s = getState()}
})$0
endsnippet

snippet df "inject a dispatch to props" b
${1:name}(${2:args}){
	d({ type: '${3:$1}', ${4:$2}})
},$0
endsnippet

snippet rdc "reducer" b
！！记得加到reducer_table里面！！！
function ${1:name}(s${2:, a}) {
	return s
}
$0
endsnippet

# -------------- freezer ------------------

snippet freezer "导入freezer" b
import Freezer from 'freezer-js'
endsnippet

snippet freezers "freezer的片段代码" b
constructor(p) {
	super(p)

	this.store = new Freezer(p)
	this.store.on('update', x=>{ this.forceUpdate() })
}

componentWillReceiveProps(np) {
	this.store.set(new Freezer(np).get()) // p->s模式
}
endsnippet

snippet frs "freezer模式下的state" b
const s = this.store.get()
endsnippet

# -------------- immutable相关 ------------------

snippet iset "immu set" w
${1:v} = $1.set('${2:key}', ${3:$2})$0
endsnippet

snippet iget "immu get" w
${1:v}.get(${2:'${3:key}'})$0
endsnippet

snippet idel "immu del" w
${1:v} = $1.delete(${3:'${4:key}'})$0
endsnippet

# -------------- jsx内部 ------------------

snippet < "换行的jsx" w
<$1>
	${2:${VISUAL}}
</$1>$0
endsnippet

snippet <> "jsx" w
<$1>${0:${VISUAL}}</$1>
endsnippet

snippet << "<xxx />" w
<$1 />
endsnippet

snippet /x "jsx注释" 
{/*
${1:${VISUAL}}
*/}
endsnippet

snippet {/ "jsx注释，同/x" 
{/*
${1:${VISUAL}}
*/}
endsnippet

snippet =x "jsx里属性赋值" w
${1:attr}={${2:val}} $0
endsnippet

# 同=x
snippet ={ "jsx里属性赋值" w
${1:attr}={${2:val}} $0
endsnippet

snippet clsn "className=" w
className={${1:cx(${2:cls}${3:, \{ ${4:key} : ${5:con} \}})}} $0
endsnippet

# ----------- 导出 -------------

snippet exp "export" b
export const ${1:name} = ${2:value}
endsnippet

snippet ed "export default" b
export default $0
endsnippet

snippet ed{ "export default { ... }" b
export default { $0 }
endsnippet

snippet ef "导出函数" b
export function ${1:name}(${2:arg}){
	$0
}
endsnippet

snippet e' "export string" b
export const ${1:name} = '$2' $0
endsnippet

snippet e{ "导出对象" b
export const ${1:obj} = {
	$0
}
endsnippet

# ------------------- 导入 -----------------------
snippet imp "import" b
import $1 from '$0'
endsnippet

snippet hotkeys "react-hotkeys" b
import {HotKeys} from 'react-hotkeys'
endsnippet

snippet css "cssobj.js" b
import {${1:w}} from './utils/cssobj.js'
endsnippet

snippet editable "Editable" b
import Editable from './utils/components/Editable.js'
endsnippet

snippet jss "定义jss对象" b
const C = css({
	$1
})$0
endsnippet

snippet _ "lodash" b
import _ from 'lodash'
endsnippet

snippet cx "classnames" b
import cx from 'classnames'
endsnippet

snippet immu "immutable" b
import ${1:\{Map as IMap\}} from 'immutable'
endsnippet

snippet uuid "uuid" b
import uuid from 'uuid/v1' $0
endsnippet

snippet radium "radium" b
import Radium from 'radium'$0
endsnippet

snippet modash "modash" b
import {${1:test,}} from './utils/modash.js'$0
endsnippet

snippet form_encode "form_encode" b
import form_encode from 'form-urlencoded'
endsnippet

snippet yaml "yaml" b
import yaml from 'js-yaml'
endsnippet

snippet iframe "iframe" b
import { get_parent_url } from './utils/iframe.js'
endsnippet

snippet H "<H />" b
import H from './utils/components/H.js'
endsnippet

snippet V "<V />组件" b
import V from './utils/components/V.js'
endsnippet

snippet Div "<Div />组件" b
import Div from './utils/components/Div.js'
endsnippet

snippet select "react-select" b
import Select from 'react-select'
import 'react-select/dist/react-select.css'
endsnippet

snippet Select "react-select组件" w
<Select value="one" options={[
{
	value : 'asp', 
	label : 'Asp.net',
},]} onChange={val=>{}} name={} />
endsnippet

snippet modal "react-modal" b
import Modal from 'react-modal'
endsnippet

snippet Modal "react-modal组件" b
<Modal
	isOpen={}
	style={}
	contentLabel="Example Modal"
	onAfterOpen={}
	onRequestClose={}
>
	$0
</Modal>
endsnippet

snippet form-data "form-data" b
import FormData from 'form-data'
endsnippet

# 还不完善，后续再补充了
snippet {modal "react-modal一系列配套的东西" b
open${1:Dlg}() {
	this.setState({ ${2:dlg_on}:true })
}

以下加到state
	$2 : false,
以下加到render
	{this.$1()}

close$1() { 
	this.setState({ $2 : false })
}

$1() { 
	const s = this.state 
	return <Modal
		isOpen={s.$2}
		style={{
		content: {
			...dlg,
		}
		}}
		contentLabel="$1"
		onRequestClose={this.close$1.bind(this)}
	>
		haha
	</Modal>
}
endsnippet

snippet codemirror "react-codemirror" b
import CodeMirror from 'react-codemirror'
import 'codemirror/mode/yaml/yaml'
import 'codemirror/lib/codemirror.css'
endsnippet

snippet CodeMirror "code mirror组件" w
<CodeMirror value={} onChange={new_txt=>{}} options={{mode:'yaml', lineNumbers:true}} />
endsnippet

snippet fetch "nodejs的node-fetch" b
import fetch from 'node-fetch'
endsnippet

# ------------------- 常用组件 -----------------------

snippet button "button" w
<button onClick={null}>${1:Btn}</button>
endsnippet

snippet Editable "Editable" w
<Editable ${1:value=\{$2\}}${3: onDone=\{\}}${4: is_editing}${5: multiline} />
endsnippet

snippet checkbox "checkbox" b
<input type='checkbox' checked={$1} onChange={} />
endsnippet

# ------------------- Jest测试 -----------------------

snippet test "一个Jest的testing case" b
test('${1:desc}', () => {
	$0
})
endsnippet

snippet tobe "expect(...).toBe(...)" b
expect($1).toBe($2)
endsnippet

snippet test_table "使用用例表格来进行测试" b
test('${1:desc}', () => {
	const tb = [
		$0 // 第一个值是返回，后面是参数系列
	]

	for (let i of tb) {
		let [ret, ...para ] = i
		expect(${2:$1}(...para)).${3:toBe}(ret)
	}
})
endsnippet

