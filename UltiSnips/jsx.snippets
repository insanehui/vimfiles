# 自己常用的 js snips 都放这里，实际上不再区分jsx

# ------------ console调试相关 ---------------------

snippet cg "console.group" b
console.group("${1:label}")
${VISUAL}$0
console.groupEnd()
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"${3:, $2}})
endsnippet

# ------------------ 常用流程 ------------------

snippet if "if语句" w
if ( ${1:con} ) {
	${0:${VISUAL}}
}
endsnippet

snippet if" "if 判断字符串" w
if ( ${1:v} === '${2:str}' ) {
	${0:${VISUAL}}
}
endsnippet

snippet null "判断是否为null" w
if ( ${1:!}_.isNull(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet undef "判断是否为undefined" w
if ( ${1:!}_.isUndefined(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet num "判断是否为number" w
if ( ${1:!}_.isNumber(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet forofa "for ... of array" b
for (let ${1:i} of ${2:arr}) {
	${3:console.log($1)}
}
endsnippet

# ------------ 对象 -------------

snippet :o "增加一个属性，该属性是个对象" b
${1:key} : {
	$0
},

endsnippet

# ----------- 函数 --------------

snippet fun "普通函数" w
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}

endsnippet

snippet (f "自调用函数、闭包调用" w
(function(${1}) {
	${0}
}(${2}))

endsnippet

snippet {f "类成员方法" b
${1:name}(${2:arg}) {
	$0
}

endsnippet

# ----------- react ---------------

snippet p "this.props" b
let p = this.props
$0
endsnippet

snippet s "this.state" b
let s = this.state
$0
endsnippet

snippet ss "this.setState" b
this.setState({ $0 })
endsnippet

snippet index "init a index file" b
import React from 'react'
import { render } from 'react-dom'

import App from './App.js'

render(<App />, document.getElementById('root'))

endsnippet

snippet cmp "init a component file" b
import React, { Component } from 'react'
import { css } from './utils/cssobj.js'

const S = css({
})

class ${1:Test} extends Component {
	render() {
		return ${2:<div>${3:test}</div>}
	}
}

$1.protoTypes = {
}

export default $1

endsnippet

snippet ct "构造函数constructor" b
constructor(p) {
	super(p)

	this.state = {}
}
$0
endsnippet

snippet wrp "componentWillReceiveProps" b
componentWillReceiveProps(np) {
}
$0
endsnippet

snippet rcc "react create class" b
const ${1:X} = React.createClass({
	render(){
		return (
			${0:<div>hello</div>}
		)
	}
})
endsnippet

snippet crc "class extends react component" b
class ${1:X} extends Component {
	render() {
		return <div>${0:Test}</div>
	}
}
endsnippet

snippet bind "用于事件响应函数的bind" w
this.${1:method}.bind(this${2:, arg})
endsnippet

# -------------- jsx内部 ------------------

snippet t "jsx" w
<$1>${0:${VISUAL}}</$1>
endsnippet

snippet /x "comments in jsx" 
{/* $0 */}
endsnippet

snippet =x "jsx里属性赋值" w
${1:attr}={${2:val}} 
endsnippet

snippet .= "className=" w
className={${1:cx(${2:cls}${3:, \{ ${4:key} : ${5:con} \}})}}
endsnippet

# ----------- 导出 -------------
snippet ef "导出函数" b
export function ${1:func_name}(${2:arg}){
	$0
}

endsnippet

# ------------------- 导入 -----------------------
snippet imp "import" b
import $1 from '$0'
endsnippet

snippet hotkeys "react-hotkeys" b
import {HotKeys} from 'react-hotkeys'
endsnippet

snippet css "cssobj.js" b
import {${1:ptr}} from './utils/cssobj.js'
endsnippet

snippet _ "lodash" b
import _ from 'lodash'
endsnippet

snippet cx "classnames" b
import cx from 'classnames'
endsnippet
