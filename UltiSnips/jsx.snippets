# 自己常用的 js snips 都放这里，实际上不再区分jsx

# ------------ console调试相关 ---------------------

snippet cg "console.group" b
console.group("${1:label}")
${VISUAL}$0
console.groupEnd()
endsnippet

snippet cl "console.log" w
console.log(${1:"${2:value}"${3:, ${4:$2}}})
endsnippet

# ------------------ 常用流程 ------------------

snippet /* "块注释" w
/* $1 */$0
endsnippet

snippet con "const声明" w
const ${1:name} = ${2:${VISUAL}}
endsnippet

snippet let "let声明" w
let ${1:name} = ${2:${VISUAL}}
endsnippet

snippet if "if语句" w
if ( ${1:con} ) {
	${2:${VISUAL}}
} $0
endsnippet

snippet ifs "if 判断字符串" w
if ( ${1:v} === '${2:str}' ) {
	${3:${VISUAL}}
}$0
endsnippet

snippet else "else" w
else {
	$0
}
endsnippet

snippet null "判断是否为null" w
if ( ${1:!}_.isNull(${2:${VISUAL}}) ) {
	$3
}$0
endsnippet

snippet undef "判断是否为undefined" w
if ( ${1:!}_.isUndefined(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet num "判断是否为number" w
if ( ${1:!}_.isNumber(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet obj "判断是否为obj" w
if ( ${1:!}_.isObject(${2:${VISUAL}}) ) {
	$0
}
endsnippet

snippet forof[ "for ... of array" b
for (let ${1:i} of ${2:arr}) {
	${3:console.log($1)}
}
endsnippet

snippet map "map" w
map(${1:${VISUAL}}, (${2:item}, ${3:i} ) => {
	$0
})
endsnippet

snippet each "each" w
each(${1:datas}, (${2:v}, ${3:i} ) => {
	$0
})
endsnippet

# ------------ 对象、数组内部 -------------

snippet oo "对象化" w
{ 
	${1:key} : ${2:${VISUAL}},
}$0
endsnippet

snippet ooo "行内对象化" w
{ ${1:key} : ${2:${VISUAL}}, }$0
endsnippet

snippet : "增加一个普通属性" w
${1:key} : ${2:val}, $0
endsnippet

snippet :o "增加一个属性，该属性是个对象" b
${1:key} : {
	$0
},
endsnippet

snippet :a "增加一个数组属性" b
${1:key} : [
	$0
],
endsnippet

snippet :' "增加一个字符串属性" w
${1:key} : '${2:val}',
endsnippet

snippet {, "增加一个数组元素，该元素是一个对象" b
{
	$0
},
endsnippet

snippet {}, "增加一个数组元素，该元素是一个对象，行内" w
{ ${1:${VISUAL}} },$0
endsnippet

# ----------- 函数 --------------

snippet fun "普通函数" w
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}

endsnippet

snippet f( "匿名函数" w
(${2:argument}) => {
	${VISUAL}$0
}
endsnippet

snippet f() "同一行内的匿名函数" w
(${2:argument}) => {${VISUAL}$0}
endsnippet

snippet (f "闭包" w
(()=>{
	return ${1:${VISUAL}}
})()
endsnippet

snippet {f "类成员方法" b
${1:name}(${2:arg}) {
	$3
}$0
endsnippet

# ----------- eslint ---------------

snippet lintpascal "忽略pascal的要求" b
/* eslint-disable react/jsx-pascal-case */
endsnippet

snippet nolint "对下一行不检查" b
// eslint-disable-next-line
endsnippet

# ----------- react ---------------

snippet p "this.props" b
const p = this.props $0
endsnippet

snippet s "this.state" b
const s = this.state $0
endsnippet

snippet ss "this.setState" b
this.setState({ $0 })
endsnippet

snippet st "style=..." w
style={${1:\{$2\}}} $0
endsnippet

snippet index "init a index file" b
import React from 'react'
import { render } from 'react-dom'

import App from './App.js'

render(<App />, document.getElementById('root'))

endsnippet

snippet cmp "init a component file" b
import React, { PureComponent } from 'react'

class ${1:Test} extends PureComponent {
	render() {
		return ${2:<div>${3:test}</div>}
	}
}

export default $1

endsnippet

snippet fcmp "函数来表示一个对象" w
function ${1:Name}(p){
	return $2
} $0
endsnippet

snippet ct "构造函数constructor" b
constructor(p) {
	super(p)

	this.state = {}
}
$0
endsnippet

snippet wrp "componentWillReceiveProps" b
componentWillReceiveProps(np) {
	$1
}$0
endsnippet

snippet dm "componentDidMount" b
componentDidMount(){
	$1
}$0
endsnippet

snippet rcc "react create class" b
const ${1:X} = React.createClass({
	render(){
		return (
			${0:<div>hello</div>}
		)
	}
})
endsnippet

snippet cc "class extends react component" b
class ${1:X} extends Component {
	render() {
		return <div>${0:Test}</div>
	}
}
endsnippet

snippet bind "用于事件响应函数的bind" w
this.${1:method}.bind(this${2:, arg})
endsnippet

snippet cbind "在构造函数中的手动bind" b
this.${1:method} = this.$1.bind(this)
endsnippet

snippet bbind "bind方法赋给同名属性" w
${1:attr}={this.${2:$1}.bind(this)} $0
endsnippet

snippet isr "isRequired" w
isRequired
endsnippet

snippet pt "引入PropTypes" b
const { ${1:number} } = React.PropTypes
endsnippet

snippet pt= "设置propTypes" b
${1:Component}.propTypes = {
	$0
}
endsnippet

# ----------- redux ---------------

snippet rcmp "redux component" b
import React, { PureComponent } from 'react';
import { connect } from 'react-redux'

class ${1:ComponentName} extends PureComponent {

	render() {
		return <div>
		</div>
	}
}

const sm = (s) => {
	return {
	}
}

const dm = (d) => {
	return {
		some_action(){
			// d({ type: 'some_action', })
		},
	}
}

export default connect(sm, dm)($1)

endsnippet

# -------------- immutable相关 ------------------

snippet iset "immu set" w
${1:v} = $1.set('${2:key}', ${3:$2})$0
endsnippet

snippet iget "immu get" w
${1:v}.get('${3:key}')$0
endsnippet

snippet idel "immu del" w
${1:v} = $1.delete(${3:'${4:key}'})$0
endsnippet

# -------------- redux ------------------
snippet df "inject a dispatch to props" b
${1:name}(${2:args}){
	d({ type: '${3:$1}', ${4:$2}})
},$0
endsnippet

# -------------- jsx内部 ------------------

snippet < "换行的jsx" w
<$1>
	${0:${VISUAL}}
</$1>
endsnippet

snippet <> "jsx" w
<$1>${0:${VISUAL}}</$1>
endsnippet

snippet << "<xxx />" w
<$1 />
endsnippet

snippet {/ "jsx注释" 
{/* ${1:${VISUAL}} */}
endsnippet

snippet =x "jsx里属性赋值" w
${1:attr}={${2:val}} $0
endsnippet

snippet clsn "className=" w
className={${1:cx(${2:cls}${3:, \{ ${4:key} : ${5:con} \}})}} $0
endsnippet

# ----------- 导出 -------------

snippet ed "export default" b
export default $0
endsnippet

snippet ed{ "export default { ... }" b
export default { $0 }
endsnippet

snippet ef "导出函数" b
export function ${1:func_name}(${2:arg}){
	$0
}

endsnippet

snippet e{ "导出对象" b
export const ${1:obj} = {
	$0
}
endsnippet

# ------------------- 导入 -----------------------
snippet imp "import" b
import $1 from '$0'
endsnippet

snippet hotkeys "react-hotkeys" b
import {HotKeys} from 'react-hotkeys'
endsnippet

snippet css "cssobj.js" b
import {${1:w}} from './utils/cssobj.js'

endsnippet

snippet _ "lodash" b
import _ from 'lodash'
endsnippet

snippet cx "classnames" b
import cx from 'classnames'
endsnippet

snippet immu "immutable" b
import Immu from 'immutable'
endsnippet

snippet uuid "uuid" b
import uuid from 'uuid/v1' $0
endsnippet

snippet radium "radium" b
import Radium from 'radium'$0
endsnippet

snippet modash "modash" b
import {${1:test,}} from './utils/modash.js'$0
endsnippet

