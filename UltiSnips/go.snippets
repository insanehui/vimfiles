snippet rv "reflect.ValueOf" b
${1:rv} := reflect.ValueOf(${0:${VISUAL}})
endsnippet

snippet init "func init"
func init() {
	$0
}
endsnippet

snippet fp "log.Printf(...)"
fmt.Println($1)
endsnippet

snippet fr "函数表达式来wrap"
${1:func}(${0:${VISUAL}})
endsnippet

snippet "I "import utils io" !b
${1:I} "utils/io"
endsnippet

# -------------- 导入 -----------------------------
snippet "yaml "import yaml" !b
"github.com/ghodss/yaml"
endsnippet

snippet "U "自己的utils" b
U "utils"
endsnippet

snippet "validator "govalidator" b
V "github.com/asaskevich/govalidator"
endsnippet

snippet "J "自己的json utils" b
J "utils/json"
endsnippet

snippet "stdout "import log to stdout" !b
_ "utils/log/stdout"
endsnippet

# 覆盖 vim-go: func
snippet func "func Function(...) [error] { ... }"
// ${1:func}
func ${2:name}(${3:params}) ${4} {
	${0:${VISUAL}}
}
endsnippet

# 覆盖 vim-go: error panic
snippet errp "error check" !b
if err := ${0:${VISUAL}}; err != nil {
	panic(err)
}
${0}
endsnippet

# 覆盖 vim-go 的 errn
snippet errn "Error return " !b
if err != nil {
	return
}
${0}
endsnippet


# json http handler
snippet hfjson "json http func" !b
// ${1:a http handler}
func ${2:NewFunc}(w http.ResponseWriter, r *http.Request) {

	// 传入参数
	var q struct {
	}

	// 返回
	var ret struct {
		Err
		Data interface{} \`json:"data"\`
	}

	H.JsonDo(w, r, &q, &ret, func() {
		${0}
	})

}
endsnippet

snippet rhfj "httprouter的json func" b
func ${1:NewFunc}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {

	// 传入参数
	var q struct {
	}

	// 返回
	var ret struct {
		Err
		// Data interface{} \`json:"data"\`
	}

	H.JsonDo(w, r, &q, &ret, func() {
	})

}
endsnippet

# log printf
snippet lf "log.Printf(...)"
log.Printf("$1: %+v", $1)
endsnippet

# log println
snippet lp "log.Println"
log.Println(${0:${VISUAL}})
endsnippet

